"""
parser.py - Graph parser for Large Graph Path Finder (LGPF)

Parses graphs generated by graph-generator.py into an adjacency list
suitable for pathfinding algorithms.

Expected JSON format:
{
  "directed": false,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {"id": 0}, {"id": 1}, ...
  ],
  "links": [
    {"weight": 5, "source": 0, "target": 1},
    ...
  ]
}
"""

import json
import os


class GraphParseError(Exception):
    """Custom exception for invalid graph files."""

    pass


def load_graph(json_file, stop_flag=None):
    """
    Parse a JSON graph file generated by graph-generator.py.

    Parameters
    ----------
    json_file : str
        Path to the JSON file.

    Returns
    -------
    dict
        Adjacency list representation: node -> list of (neighbor, weight).

    Raises
    ------
    GraphParseError
        If the file does not exist, is malformed, or missing required fields.
    """
    if not os.path.exists(json_file):
        raise GraphParseError(f"File not found: {json_file}")

    try:
        with open(json_file, "r") as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        raise GraphParseError(f"Invalid JSON in {json_file}: {e}")

    if "nodes" not in data or "links" not in data:
        raise GraphParseError("JSON missing required 'nodes' or 'links' sections")

    adj = {node["id"]: [] for node in data["nodes"]}
    directed = data.get("directed", False)

    for edge in data["links"]:
        # Early abort check
        if stop_flag and stop_flag.get("abort"):
            print("[INFO] Aborting graph load early (time/memory limit).")
            break

        if "source" not in edge or "target" not in edge or "weight" not in edge:
            raise GraphParseError("Edge entry missing 'source', 'target', or 'weight'")
        u, v, w = edge["source"], edge["target"], edge["weight"]
        adj[u].append((v, w))
        if not directed:
            adj[v].append((u, w))

    return adj
